Q1 & A1:
    Discuss the following commands:
        > eth.sendTransaction({from: eth.accounts[0], to:
        "0xfa919b49ef34a821fb4cadfdfa5cc6593cb46fe1", value: web3.toWei(2, "ether")})
        
        A> eth.sendTransaction is the command concerned with sending etherium from a node/accout to anohter
        - we define the paramters: 
            * from  --- value ---> the address of the account we want to send from
            * to    --- value ---> the address of the account we want to send to
            * value --- value ---> the amount and type of coin we want to send

        =================================================
        > eth.pendingTransactions
        
        A > this command is concerned with showing the pending transactions between accounts,
        it shows all the transactions to be sent. it's worth mentioning that transactions might have
        some delay, hence it's useful to use this command to check what transactions has finished.


Q2: 
    Discuss Hashing algorithms

A2: 
    Hashing Algortihms:
        Hashing algorithms are essential tools in computer science, cryptography, and data management.
        They transform input data of variable lengths into fixed-size output, known as hash values or hash codes and it's irreversible process which makes it secure.
        The primary purpose of hashing is to map data of arbitrary size to data of fixed size.

    What is Hashing?
        Hashing involves taking an input (or 'message') and returning a fixed-size string of bytes, typically a hexadecimal string.
        This output is unique to each unique input. Even a small change in the input should produce a significantly different hash value.
    
    Properties of Good Hashing Algorithms:
        - Deterministic: Given the same input, a hashing algorithm should always produce the same hash value.
        - Efficiency: Hash functions should be computationally efficient to handle large volumes of data quickly.
        - Uniformity: A good hashing algorithm distributes hash values evenly across its output space, minimizing collisions.
        - Irreversibility: It should be computationally infeasible to determine the original input from the hash value.
        - Avalanche Effect: A small change in the input should result in a vastly different hash value.
    
    Hashing Algorithms Examples:
        - MD5
        - SHA Family: SHA-1, SHA-256, SHA-384


Q3:
   Discuss Encryption Algorithms 

A3:
    Encryption Algorithms:
        Encryption algorithms are fundamental to securing data in transit and at rest.
        They transform plaintext data into ciphertext, which can only be deciphered with the appropriate decryption key.
    
    What is Encryption?
        Encryption is the process of converting plaintext (normal, readable data) into ciphertext (unreadable data) using an algorithm and a key. 
        This transformation is done to protect the confidentiality and integrity of data, ensuring that only authorized parties can access and decipher
        the original information.
    
    Properties of Good Encryption Algorithms:
        - Security: Algorithms should resist known cryptographic attacks and provide confidentiality, integrity, and authenticity.
        - Efficiency: Encryption and decryption should be computationally feasible for practical use.
        - Key Length: Longer key lengths generally provide stronger security against brute-force attacks.
        - Key Management: Secure key distribution and management are crucial to maintaining encryption security.
        - Resistance to Quantum Attacks: With the rise of quantum computing, algorithms resistant to quantum attacks gain importance.
    
    Encryption Algorithms Examples:
        - AES
        - RSA

